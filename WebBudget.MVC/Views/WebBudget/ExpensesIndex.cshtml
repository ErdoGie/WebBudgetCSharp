@model WebBudget.Application.WebBudget.Commands.CategoryViewModels.CreateExpenseView



@{
	ViewData["Title"] = "ExpensesIndex";
	Layout = "~/Views/Shared/_Layout.cshtml";

}


@section containerContent  {
	<h4>Manage your expenses</h4>
	<hr />


	<div class="d-flex justify-content-center">
		<button type="button" class="btn btn-primary" data-toggle="modal" data-target="#addExpenseModal">
			Add Expense
		</button>
	</div>


	<div class="row">
		@foreach (var income in Model.Expenses)
		{
			<div class="col-md-6 col-lg-4 small-card">
				<div class="card m-3 small-card">
					<div class="card-body">
						<h6 class="card-title"> @income.ExpenseType</h6>
						<h6 class="card-subtitle mb-2 text-muted">@income.ExpenseDate.ToString("yyyy-MM-dd")</h6>
						<h6 class="card-title"> @income.ExpenseValue zł</h6>

						<button type="button" class="btn btn-info edit-btn" data-toggle="modal" data-target="#editExpenseModal" data-income-id="@income.ExpenseId">Edit</button>
						<button type="button" class="btn btn-danger delete-btn" data-toggle="modal" data-target="#deleteExpenseModal" delete-income-id="@income.ExpenseId">Delete</button>

					</div>
				</div>
			</div>
		}
	</div>


  }


<!-- ADD MODAL-->

<div id="addExpenseModal" class="modal fade" role="dialog" style="text-align:center">
	<div class="modal-dialog modal-dialog-centered" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="addExpenseModalLabel">Add Expense</h5>
				<button type="button" class="close" data-dismiss="modal" aria-label="Close">
					<span aria-hidden="true">&times;</span>
				</button>
			</div>
			<div class="modal-body">
				<form asp-action="CreateExpense">
					<div class="form-group">
						<label for="ExpenseCommand.ExpenseType" class="control-label; modal_category" style="margin-bottom:1%">Category</label>
						<div class="form-group">
							@if (Model.ExpenseCommand.ExpenseCategories.Any())
							{
								<select id="ExpenseCommand.ExpenseType" name="ExpenseCommand.ExpenseType" class="form-control" required>
									<option style="text-align:center" value="" selected disabled>Choose expense category</option>
									@foreach (var category in Model.ExpenseCommand.ExpenseCategories)
									{
										<option style="text-align:center" value="@category.CategoryName" limit-period="@category.Date" data-limit="@category.Limit">@category.CategoryName</option>
									}
								</select>
							}
							else
							{
								<select id="ExpenseCommand.ExpenseType" name="ExpenseCommand.ExpenseType" class="form-control" required style="text-align:center">
									<option class="text-muted" disabled>No category available. Add some first.</option>
								</select>
							}

							<span class="text-danger" id="categoryValidationMessage"></span>
						</div>
					</div>

					<div class="form-group">
						<label for="ExpenseCommand.ExpenseDate" class="control-label; modal_date">Date</label>
						<input id="ExpenseCommand.ExpenseDate" style="text-align:center" name="ExpenseCommand.ExpenseDate" class="form-control" type="date" required max="9999-12-31" />
						<span class="text-danger" id="dateValidationMessage"></span>
					</div>

					<div class="form-group" id="expenseTypeLimit" style="color:white; margin-top:4%">

						<strong style="color:white"><span id="categoryLimitValue"></span></strong>
						<br />
					</div>

					<div class="form-group" id="expenseTypeSum" style="color:white;">
						<br />
						<strong style="color:white"> <span id="totalExpenseForSelectedCategory"></span> </strong>
					</div>



					<div class="form-group">
						<label for="ExpenseCommand.ExpenseValue" class="control-label; modal_value">Value</label>
						<input id="ExpenseCommand.ExpenseValue" name="ExpenseCommand.ExpenseValue" style="text-align:center" class="form-control" step="0.01" type="number" min="0" oninput="validity.valid||(value='');" required />
						<div id="valueMinusLimit1" style="color:white; margin-top:4%; display:none;"></div>
					</div>

					<div class="form-group d-flex justify-content-center">
						<input type="submit" value="Create Expense!" class="btn btn-primary" id="createButton" style="margin-top:4%" />
					</div>
				</form>
			</div>
		</div>
	</div>
</div>


<!-- Delete Modal -->

<div class="modal fade" id="deleteExpenseModal" tabindex="-1" role="dialog" aria-labelledby="deleteExpenseModalLabel" aria-hidden="true" style="text-align:center">
	<div class="modal-dialog modal-dialog-centered" role="document">
		<div class="modal-content">
			<div class="modal-header text-center">
				<h5 class="modal-title mx-auto" id="deleteModalLabel">Confirm Deletion</h5>

				<button type="button" class="close" data-dismiss="modal" aria-label="Close">
					<span aria-hidden="true">&times;</span>
				</button>
			</div>
			<div class="modal-body" style="color:white">
				Are you sure you want to delete this expense?
				<form id="deleteExpenseForm" asp-action="ExpenseDelete" method="post">
					<input type="hidden" id="DeleteExpense" name="ExpenseId" value="" />
				</form>
			</div>
			<div class="modal-footer mx-auto">
				<button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
				<button type="button" class="btn btn-danger" id="ConfirmDelete">Delete</button>
			</div>
		</div>
	</div>
</div>

<!-- Edit Modal -->
<div class="modal fade" id="editExpenseModal" tabindex="-1" role="dialog" aria-labelledby="editExpenseModalLabel" aria-hidden="true" style="text-align:center">
	<div class="modal-dialog modal-dialog-centered" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="editModalLabel">Edit Expense</h5>
				<button type="button" class="close" data-dismiss="modal" aria-label="Close">
					<span aria-hidden="true">&times;</span>
				</button>
			</div>
			<div class="modal-body">
				<form id="editExpenseForm" asp-action="ExpenseEdit" method="post">
					<div asp-validation-summary="ModelOnly" class="text-danger"></div>

					<div class="form-group">
						<label for="ExpenseType" class="control-label" style="color:white">Category</label>
						<select id="ExpenseType" name="ExpenseType" style="text-align:center" class="form-control" required>
							<option value="" selected disabled>Choose income category</option>

							@foreach (var category in Model.ExpenseCommand.ExpenseCategories)
							{
								<option value="@category.CategoryName" data-category-id="@category.CategoryId" data-limit="@category.Limit">@category.CategoryName</option>

							}
						</select>
					</div>
					<input type="hidden" id="ExpenseId" name="ExpenseId" value="" />

					<input type="hidden" id="ExpenseCategoryId" name="ExpenseCategoryId" value="" />

					<div class="form-group">
						<label for="ExpenseDate" class="control-label" style="color:white">Date</label>
						<input id="ExpenseDate" style="text-align:center" name="ExpenseDate" class="form-control" type="date" required max="9999-12-31" />
						<span class="text-danger" id="dateValidationMessage"></span>
					</div>

					<div class="form-group" id="expenseTypeLimit" style="color:white;">

						<strong style="color:white"><span id="categoryLimitValue2"></span></strong>
					</div>

					<div class="form-group" id="expenseTypeSum" style="color:white;">
						<label class="control-label" style="color:white; margin-top:4%;"> Money to spend:  </label>
						<br />
						<strong style="color:white"> <span id="totalExpenseForSelectedCategory2"></span> </strong>
					</div>


					<div class="form-group">
						<label for="ExpenseValue" class="control-label" style="color:white">Value</label>
						<input id="ExpenseValue" name="ExpenseValue" style="text-align:center" class="form-control" step="0.01" type="number" min="0" required />
						<div id="valueMinusLimit2" style="color:white; margin-top:4%; display:none;"></div>

					</div>

					<div class="modal-footer">
						<button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
						<button type="submit" class="btn btn-primary" id="EditIncomeBtn">Save Changes</button>
					</div>
				</form>
			</div>
		</div>
	</div>
</div>

@section scripts {

	@{
		await Html.RenderPartialAsync("_ValidationScriptsPartial");
	}

	<script>
		// DELETE EXPENSE
		var expenseIdToDelete;

		document.querySelectorAll('.delete-btn').forEach(button => {
			button.addEventListener('click', function () {
				expenseIdToDelete = this.getAttribute('delete-income-id');
				document.getElementById('DeleteExpense').value = expenseIdToDelete;
				console.log(expenseIdToDelete);
			});
		});


		document.getElementById('ConfirmDelete').addEventListener('click', function () {
			if (expenseIdToDelete) {
				document.getElementById('DeleteExpense').value = expenseIdToDelete;
				document.getElementById('deleteExpenseForm').submit();
				expenseIdToDelete = null;
			}
			$('#deleteExpenseModal').modal('hide');
		});


		// EDIT EXPENSE
		var expenseIdToEdit;

		document.querySelectorAll('.edit-btn').forEach(button => {
			button.addEventListener('click', function () {
				expenseIdToEdit = this.getAttribute('data-income-id');
				console.log("Edycja : " + expenseIdToEdit);
			});
		});


		document.getElementById('ExpenseType').addEventListener('change', function () {
			var editedCategory = this.value;
			var selectedCategoryId = this.options[this.selectedIndex].getAttribute('data-category-id');
			console.log("Edited Category: " + editedCategory);
			console.log("Selected Category ID: " + selectedCategoryId);
		});

		document.getElementById('ExpenseDate').addEventListener('change', function () {
			var editedDate = this.value;
			console.log("Edited Date: " + editedDate);
		});

		document.getElementById('ExpenseValue').addEventListener('input', function () {
			var editedValue = this.value;
			console.log("Edited Value: " + editedValue);
		});

		document.getElementById('EditIncomeBtn').addEventListener('click', function () {

			var expenseId = expenseIdToEdit;
			var incomeType = document.getElementById('ExpenseType').value;
			var incomeCategoryId = document.getElementById('ExpenseType').options[document.getElementById('ExpenseType').selectedIndex].getAttribute('data-category-id');
			var incomeDate = document.getElementById('ExpenseDate').value;
			var incomeValue = document.getElementById('ExpenseValue').value;


			var incomeIdField = document.getElementById('ExpenseId');

			var incomeCategoryIdField = document.getElementById('ExpenseCategoryId');

			incomeIdField.value = expenseId;
			incomeCategoryIdField.value = incomeCategoryId;

			var data = {
				IncomeId: incomeId,
				IncomeType: incomeType,
				IncomeCategoryId: incomeCategoryId,
				IncomeDate: incomeDate,
				IncomeValue: incomeValue
			};

		});

		// CATEGORY LIMITATIONS WHILE ADDING



		function formatDateForDisplay(dateString) {
			var parts = dateString.split('-');
			if (parts.length === 2) {
				var year = parts[0];
				var month = parts[1];
				return month + '/' + year;
			}
			return dateString;
		}

		var currentMonth = function displayCurrentMonthAndYear() {
			var currentDate = new Date();
			var currentYear = currentDate.getFullYear();
			var currentMonth = (currentDate.getMonth() + 1).toString().padStart(2, '0');

			var formattedDate = currentYear + '-' + currentMonth;

			return formattedDate;
			console.log('Current month and year: ' + formattedDate);
		}

		function onCategoryChange() {
			var select = document.getElementById('ExpenseCommand.ExpenseType');
			var selectedOption = select.options[select.selectedIndex];


			var limit = selectedOption.getAttribute('data-limit');
			if (limit > 0) {
				var limitPeriod = selectedOption.getAttribute('limit-period');
				var formattedLimitPeriod = formatDateForDisplay(limitPeriod);

				var limitInfo;
				limitInfo = "Monthly limit is active! " + "\n" + limit + " zł";
				document.getElementById('categoryLimitValue').style.color = "red";
			} else {
				limitInfo = "No limitations :)";
				document.getElementById('categoryLimitValue').style.color = "green";
			}

			var limitInfoWithBr = limitInfo.replace(/\n/g, '<br/>');
			document.getElementById('categoryLimitValue').innerHTML = limitInfoWithBr;
		}

		document.getElementById('ExpenseCommand.ExpenseType').addEventListener('change', onCategoryChange);


		document.getElementById('ExpenseCommand.ExpenseDate').addEventListener('change', function () {
			var selectedDate = new Date(this.value);
			var limitDate = new Date();

			if (selectedDate != limitDate) {
				document.getElementById('categoryLimitValue').innerText = '';

				document.getElementById('totalExpenseForSelectedCategory').innerText = '';


				document.getElementById('valueMinusLimit1').innerText = '';
				
			}
		
		});



		var expenseTotals = {};

		@foreach (var category in Model.Expenses)
		{
			<text>
							var expenseType = "@category.ExpenseType";
			var expenseValue = parseFloat("@category.ExpenseValue");
			if (isNaN(expenseTotals[expenseType])) {
				expenseTotals[expenseType] = expenseValue;
			} else {
				expenseTotals[expenseType] += expenseValue;
			}
			</text>
		}

			Object.keys(expenseTotals).forEach(function (expenseType) {
				var totalValue = expenseTotals[expenseType].toFixed(2);
				console.log("ExpenseType: " + expenseType + ", Total Value: " + totalValue);

				var totalExpenseElement = document.getElementById("totalExpense_" + expenseType);
				if (totalExpenseElement) {
					totalExpenseElement.textContent = totalValue + " zł";
				}
			});

		document.getElementById('ExpenseCommand.ExpenseType').addEventListener('change', function () {
			var selectElement = this;
			var selectedOption = selectElement.options[selectElement.selectedIndex];
			var selectedCategory = selectedOption.value;
			var categoryLimit = parseFloat(selectedOption.getAttribute('data-limit'));

			var totalExpenseForSelectedCategory = calculateTotalExpenseForCategory(selectedCategory);

			var totalExpenseForSelectedCategoryElement = document.getElementById('totalExpenseForSelectedCategory');

			if (!isNaN(totalExpenseForSelectedCategory) && !isNaN(categoryLimit)) {
				var remainingLimit = categoryLimit - totalExpenseForSelectedCategory;
				totalExpenseForSelectedCategoryElement.textContent = remainingLimit.toFixed(2) + " zł";
			} else {
				totalExpenseForSelectedCategoryElement.textContent = remainingLimit.toFixed(2) + " zł";
			}

		});

		var currentMonth = new Date().getMonth() + 1;  

		function calculateTotalExpenseForCategory(categoryName) {
			var totalExpense = 0;

		@foreach (var expense in Model.Expenses)
		{
			<text>
			var dateParts = "@expense.ExpenseDate".split(' ')[0].split('/');
				var year = parseInt(dateParts[2], 10);
				var month = parseInt(dateParts[1], 10) - 1;  
				var day = parseInt(dateParts[0], 10);

				var expenseDate = new Date(year, month, day);
				if (!isNaN(expenseDate)) {
					var expenseMonth = expenseDate.getMonth() + 1;
					console.log('Month for expense:', expenseMonth);
				} else {
					console.log('Invalid date format:', "@expense.ExpenseDate");
				} if ("@expense.ExpenseType" === categoryName && expenseMonth === currentMonth) {
					totalExpense += parseFloat("@expense.ExpenseValue");
				}
			</text>
		}

			return totalExpense;
		}

		var remainingLimit = null;

		function updateRemainingLimit2() {
			var selectElement = document.getElementById('ExpenseCommand.ExpenseType');
			var selectedOption = selectElement.options[selectElement.selectedIndex];
			var categoryLimit = parseFloat(selectedOption.getAttribute('data-limit'));

			var totalExpenseForSelectedCategoryElement = document.getElementById('totalExpenseForSelectedCategory');

			var selectedDate = new Date(document.getElementById('ExpenseCommand.ExpenseDate').value);

			var currentDate = new Date();
			var currentMonth = currentDate.getMonth() + 1;

			if (selectedDate.getMonth() + 1 === currentMonth) {
				if (!isNaN(categoryLimit) && categoryLimit !== 0) {
					remainingLimit = categoryLimit - calculateTotalExpenseForCategory(selectedOption.value);

					totalExpenseForSelectedCategoryElement.innerHTML = "Remaining money: <br>" + remainingLimit.toFixed(2) + " zł";
				} else if (categoryLimit === 0) {
					remainingLimit = 0;
					totalExpenseForSelectedCategoryElement.textContent = "No limitations :)";
					totalExpenseForSelectedCategoryElement.style.color = "gold";
				} else {
					remainingLimit = null;
					totalExpenseForSelectedCategoryElement.textContent = "Waiting...";
					totalExpenseForSelectedCategoryElement.style.color = "orange";
				}
			} else {
				totalExpenseForSelectedCategoryElement.textContent = '';
			}

			updateValueInput();
		}

		document.getElementById('ExpenseCommand.ExpenseType').addEventListener('change', function () {
			updateRemainingLimit2();
		});

		document.getElementById('ExpenseCommand.ExpenseValue').addEventListener('input', function () {
			updateValueInput2();
		});
		function updateValueInput2() {
			var expenseValueInput = document.getElementById('ExpenseCommand.ExpenseValue');
			var valueMinusLimit = document.getElementById('valueMinusLimit1');

			var enteredValue = parseFloat(expenseValueInput.value);
			var newValue = remainingLimit - enteredValue;

			var currentDate = new Date();
			var currentMonth = currentDate.getMonth() + 1;

			var selectedDate = new Date(document.getElementById('ExpenseCommand.ExpenseDate').value);

			if (selectedDate.getMonth() + 1 === currentMonth) {
				valueMinusLimit.style.display = 'block';
				if (remainingLimit > 0) {
					if (newValue > 0) {
						valueMinusLimit.textContent = 'After adding this expense, you will have ' + newValue.toFixed(2) + ' zł left.';
						valueMinusLimit.style.color = 'green';
					} else if (newValue < 0) {
						valueMinusLimit.textContent = 'You will exceed the limit by ' + Math.abs(newValue).toFixed(2) + ' zł!';
						valueMinusLimit.style.color = 'red';
					} else if (newValue === 0) {
						valueMinusLimit.textContent = 'You are break even! ' + Math.abs(newValue).toFixed(2) + ' zł!';
						valueMinusLimit.style.color = 'yellow';
					}
				} else if (remainingLimit < 0) {
					valueMinusLimit.textContent = 'You will have a negative balance of ' + Math.abs(newValue).toFixed(2) + ' zł!';
					valueMinusLimit.style.color = 'red';
				} else if (remainingLimit === 0) {
					valueMinusLimit.textContent = 'Free to go';
					valueMinusLimit.style.color = 'gold';
				}
			} else {
				valueMinusLimit.style.display = 'none';
			}
		}

		document.getElementById('ExpenseCommand.ExpenseValue').addEventListener('change', function () {
			updateValueInput2();
		});


		document.getElementById('ExpenseCommand.ExpenseDate').addEventListener('change', function () {
			var selectedDate = new Date(this.value);
			var limitDate = new Date();

			if (selectedDate.getMonth() + 1 === limitDate.getMonth() + 1) {
				document.getElementById('categoryLimitValue').innerText = '';
				document.getElementById('totalExpenseForSelectedCategory').innerText = '';
				document.getElementById('valueMinusLimit1').innerText = '';

				updateRemainingLimit2();  
				updateValueInput2();  
				onCategoryChange();  
			}
		});




		// EXPENSE CATEGORY WHILE EDITING

		document.getElementById('ExpenseType').addEventListener('change', function () {
			var selectElement = this;
			var selectedOption = selectElement.options[selectElement.selectedIndex];
			var selectedCategory = selectedOption.value;
			var categoryLimit = parseFloat(selectedOption.getAttribute('data-limit'));

			var totalExpenseForSelectedCategory = calculateTotalExpenseForCategory(selectedCategory);

			var totalExpenseForSelectedCategoryElement = document.getElementById('totalExpenseForSelectedCategory2');

			if (!isNaN(totalExpenseForSelectedCategory) && !isNaN(categoryLimit)) {
				var remainingLimit = categoryLimit - totalExpenseForSelectedCategory;
				totalExpenseForSelectedCategoryElement.textContent = remainingLimit.toFixed(2) + " zł";
			} else {
				totalExpenseForSelectedCategoryElement.textContent = remainingLimit.toFixed(2) + " zł";
			}

		});

		document.getElementById('ExpenseType').addEventListener('change', function () {
			var selectElement = this;
			var selectedOption = selectElement.options[selectElement.selectedIndex];
			var categoryLimit = parseFloat(selectedOption.getAttribute('data-limit'));
			var categoryLimitValueElement = document.getElementById('categoryLimitValue2');

			if (!isNaN(categoryLimit) && categoryLimit !== 0) {
				categoryLimitValueElement.textContent = categoryLimit.toFixed(2);
			} else {
				categoryLimitValueElement.textContent = 'No limitations :)';
				categoryLimitValueElement.style.color = "gold";
			}
		});

		document.getElementById('ExpenseType').addEventListener('change', function () {
			var selectElement = this;
			var selectedOption = selectElement.options[selectElement.selectedIndex];
			var categoryLimit = selectedOption.getAttribute('data-limit');
			var limitValueElement = document.getElementById('limitValue');
			var categoryLimitElement = document.getElementById('categoryLimitValue2');

			if (categoryLimit !== null) {
				if (parseFloat(categoryLimit) === 0) {
					limitValueElement.innerText = "No limitations :)";
				} else {
					limitValueElement.innerText = categoryLimit;
				}
				categoryLimitElement.style.display = 'block';
			} else {
				categoryLimitElement.style.display = 'none';
			}
		});

		var remainingLimit = null;

		function updateRemainingLimit() {
			var selectElement = document.getElementById('ExpenseType');
			var selectedOption = selectElement.options[selectElement.selectedIndex];
			var categoryLimit = parseFloat(selectedOption.getAttribute('data-limit'));
			var enteredValue = parseFloat(document.getElementById('ExpenseValue').value);

			var remainingLimit = isNaN(categoryLimit) ? null : categoryLimit - enteredValue;
			var valueMinusLimitElement = document.getElementById('valueMinusLimit2');

			if (!isNaN(remainingLimit) && remainingLimit >= 0) {
				valueMinusLimitElement.textContent = 'Remaining Limit: ' + remainingLimit.toFixed(2) + ' zł';
				valueMinusLimitElement.style.color = 'green';
			} else if (!isNaN(remainingLimit) && remainingLimit < 0) {
				valueMinusLimitElement.textContent = 'Exceeding Limit by: ' + Math.abs(remainingLimit).toFixed(2) + ' zł';
				valueMinusLimitElement.style.color = 'red';
			} else {
				valueMinusLimitElement.textContent = '';
			}
		}

		document.getElementById('ExpenseValue').addEventListener('input', function () {
			updateRemainingLimit();
		});

		document.getElementById('ExpenseType').addEventListener('change', function () {
			updateRemainingLimit();
		});

		function updateValueInput() {
			var expenseValueInput = document.getElementById('ExpenseValue');
			var valueMinusLimit = document.getElementById('valueMinusLimit2');

			var enteredValue = parseFloat(expenseValueInput.value);
			var newValue = remainingLimit - enteredValue;

			valueMinusLimit.style.display = 'block';
			if (remainingLimit > 0) {
				if (newValue > 0) {
					valueMinusLimit.textContent = 'After adding this expense, you will have ' + newValue.toFixed(2) + ' zł left.';
					valueMinusLimit.style.color = 'green';
				} else if (newValue < 0) {
					valueMinusLimit.textContent = 'You will exceed the limit by ' + Math.abs(newValue).toFixed(2) + ' zł!';
					valueMinusLimit.style.color = 'red';
				}
				else if (newValue === 0) {
					valueMinusLimit.textContent = 'You are break even! ' + Math.abs(newValue).toFixed(2) + ' zł!';;
					valueMinusLimit.style.color = 'yellow';
				}
			} else if (remainingLimit < 0) {
				valueMinusLimit.textContent = 'You will have a negative balance of ' + Math.abs(newValue).toFixed(2) + ' zł!';
				valueMinusLimit.style.color = 'red';
			}
			else if (remainingLimit === 0) {
				valueMinusLimit.textContent = 'Free to go';
				valueMinusLimit.style.color = 'gold';

			}
		}


		function updateValueInputAndTotal() {
			updateValueInput2();
			updateRemainingLimit2();
		}

		document.getElementById('ExpenseCommand.ExpenseValue').addEventListener('input', function () {
			updateValueInputAndTotal();
		});

		document.getElementById('ExpenseCommand.ExpenseType').addEventListener('change', function () {
			updateValueInputAndTotal();
		});




		function setDefaultExpenseDate() {
			var today = new Date();
			var day = today.getDate();
			var month = today.getMonth() + 1;
			var year = today.getFullYear();


			var formattedDate = year + '-' + ('0' + month).slice(-2) + '-' + ('0' + day).slice(-2);

			document.getElementById('ExpenseCommand.ExpenseDate').value = formattedDate;
		}

		window.onload = setDefaultExpenseDate;



		function getCurrentMonth() {
			var today = new Date();
			return today.getMonth() + 1;
		}

















	</script>
}